---
import BaseLayout from "../layouts/BaseLayout.astro";
import Center from "../components/Center.astro";
import PageHeader from "../components/PageHeader.astro";

// ===== 页面元信息 =====
const title = "NOW";
const description = "What I’m into lately — books, films, music — plus a tiny feed of recent moments.";

// ===== 更新时间（手动维护或后续自动化） =====
const updated = "2025-08-18"; // TODO: 更新为当前日期

// ====== 推荐：Books / Movies / Music（占位示例） ======
type Rec = {
  title: string;
  cover: string; // 图片路径或外链
  note?: string;
  href?: string; // 可选外链
  meta?: string; // 作者/导演/年份 等
};

const books: Rec[] = [
  {
    title: "The Pragmatic Programmer",
    meta: "Andrew Hunt, David Thomas",
    cover: "/images/covers/book-placeholder.jpg",
    note: "Timeless reminders about building and thinking like a craftsman.",
    href: "https://example.com",
  },
  {
    title: "Deep Learning with Python",
    meta: "François Chollet",
    cover: "/images/covers/book-placeholder.jpg",
    note: "Clear, practical, and great for quick refreshers.",
  },
  {
    title: "The Design of Everyday Things",
    meta: "Don Norman",
    cover: "/images/covers/book-placeholder.jpg",
    note: "Why things feel intuitive (or not). A lens I keep using.",
  },
];

const movies: Rec[] = [
  {
    title: "Oppenheimer",
    meta: "Christopher Nolan, 2023",
    cover: "/images/covers/movie-placeholder.jpg",
    note: "Dense, rhythmic, and disturbingly beautiful.",
  },
  {
    title: "Past Lives",
    meta: "Celine Song, 2023",
    cover: "/images/covers/movie-placeholder.jpg",
    note: "Quiet tension and tender timing.",
  },
  {
    title: "Dune: Part Two",
    meta: "Denis Villeneuve, 2024",
    cover: "/images/covers/movie-placeholder.jpg",
    note: "Scale done right; sound and sand.",
  },
];

const music: Rec[] = [
  {
    title: "Random Access Memories",
    meta: "Daft Punk",
    cover: "/images/covers/music-placeholder.jpg",
    note: "Warm analog textures; perfect late-night focus.",
  },
  {
    title: "A Moon Shaped Pool",
    meta: "Radiohead",
    cover: "/images/covers/music-placeholder.jpg",
    note: "Fragile and meticulous; strings like mist.",
  },
  {
    title: "Nujabes Collection",
    meta: "Nujabes",
    cover: "/images/covers/music-placeholder.jpg",
    note: "Gentle beats for reading and jotting notes.",
  },
];

// ====== 最近三条动态（QQ 空间感） ======
type Mini = {
  date: string; // "YYYY-MM-DD"
  icon: string; // 📝 / 🎬 / 🎵 / ⚙️ ...
  text: string;
  href?: string; // 可选链接
};
const feed: Mini[] = [
  { date: "2025-08-18", icon: "⚙️", text: "Tweaked my RAG prompt for better grounding on PDFs." },
  { date: "2025-08-16", icon: "📝", text: "Drafted notes on multispectral band selection." },
  { date: "2025-08-13", icon: "🎵", text: "Looping Nujabes while cleaning datasets." },
];
---

<BaseLayout title={title} description={description} includeFooter padBottom>
  <PageHeader title={title} description={description} />
  <Center>
    <article class="now">
      <p class="updated">Updated: {updated}</p>

      <!-- 推荐区块 -->
      <section class="section">
        <h2 class="section-title">Books</h2>
        <ul class="grid-cards">
          {books.map((b) => (
            <li class="card">
              <div class="media">
                <img src={b.cover} alt={b.title} loading="lazy" />
              </div>
              <div class="info">
                <div class="title">{b.title}</div>
                {b.meta && <div class="meta">{b.meta}</div>}
                {b.note && <p class="note">{b.note}</p>}
                {b.href && (
                  <a class="more" href={b.href} target="_blank" rel="noopener noreferrer">
                    Learn more ↗
                  </a>
                )}
              </div>
            </li>
          ))}
        </ul>
      </section>

      <section class="section">
        <h2 class="section-title">Movies</h2>
        <ul class="grid-cards">
          {movies.map((m) => (
            <li class="card">
              <div class="media">
                <img src={m.cover} alt={m.title} loading="lazy" />
              </div>
              <div class="info">
                <div class="title">{m.title}</div>
                {m.meta && <div class="meta">{m.meta}</div>}
                {m.note && <p class="note">{m.note}</p>}
              </div>
            </li>
          ))}
        </ul>
      </section>

      <section class="section">
        <h2 class="section-title">Music</h2>
        <ul class="grid-cards">
          {music.map((s) => (
            <li class="card">
              <div class="media">
                <img src={s.cover} alt={s.title} loading="lazy" />
              </div>
              <div class="info">
                <div class="title">{s.title}</div>
                {s.meta && <div class="meta">{s.meta}</div>}
                {s.note && <p class="note">{s.note}</p>}
              </div>
            </li>
          ))}
        </ul>
      </section>

      <!-- 最近动态（三条） -->
      <section class="section">
        <h2 class="section-title">Recent</h2>
        <ol class="mini-feed">
          {feed.slice(0, 3).map((f) => (
            <li class="mini-item">
              <span class="dot" aria-hidden="true">{f.icon}</span>
              <div class="mini-body">
                <div class="mini-head">
                  <time class="mini-date">{f.date}</time>
                </div>
                <div class="mini-text">
                  {f.href ? (
                    <a href={f.href} target="_blank" rel="noopener noreferrer">{f.text}</a>
                  ) : (
                    f.text
                  )}
                </div>
              </div>
            </li>
          ))}
        </ol>
      </section>
    </article>
  </Center>
</BaseLayout>

<style lang="scss">
  .now {
    display: grid;
    gap: var(--space-3xl);
    padding-block-end: var(--space-3xl);
  }

  .updated {
    color: var(--gray-11);
    font-size: var(--step--1);
    margin: 0;
  }

  .section { display: grid; gap: var(--space-m); }
  .section-title {
    font-size: var(--step-1);
    font-weight: 700;
    letter-spacing: .02em;
  }

  /* 推荐卡片网格 */
  .grid-cards {
    list-style: none; margin: 0; padding: 0;
    display: grid; gap: var(--space-l);
    grid-template-columns: repeat(3, minmax(0,1fr));

    @media (width < 960px) { grid-template-columns: repeat(2, minmax(0,1fr)); }
    @media (width < 640px) { grid-template-columns: 1fr; }
  }

  .card {
    display: grid;
    grid-template-columns: 96px 1fr;
    gap: var(--space-m);
    border: 1px solid var(--gray-6);
    border-radius: 14px;
    background: #fff;
    box-shadow: 0 6px 16px rgba(0,0,0,.04);
    padding: var(--space-m);
    align-items: center;

    @media (width < 480px) {
      grid-template-columns: 72px 1fr;
    }
  }

  .media img {
    width: 96px; height: 96px; object-fit: cover;
    border-radius: 10px; border: 1px solid var(--gray-5);
    background: #fafafa;
  }

  .info { display: grid; gap: 6px; }
  .title { font-weight: 600; }
  .meta { font-size: var(--step--1); color: var(--gray-11); }
  .note { margin: 0; color: var(--gray-12); }
  .more { font-size: var(--step--1); text-decoration: underline; }

  /* 最近动态 */
  .mini-feed {
    list-style: none; margin: 0; padding: 0;
    display: grid; gap: var(--space-m);
  }

  .mini-item {
    display: grid;
    grid-template-columns: 28px 1fr;
    gap: var(--space-s);
    align-items: start;
  }

  .dot {
    width: 24px; height: 24px;
    display: grid; place-items: center;
    border-radius: 999px;
    background: #f6f6f6;
    border: 1px solid var(--gray-6);
    font-size: 14px;
  }

  .mini-body { display: grid; gap: 2px; }
  .mini-head { display: flex; gap: 8px; align-items: baseline; }
  .mini-date { font-size: var(--step--1); color: var(--gray-11); }
  .mini-text a { text-decoration: underline; }
</style>
