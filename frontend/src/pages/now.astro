---
import BaseLayout from "../layouts/BaseLayout.astro";
import Center from "../components/Center.astro";
import PageHeader from "../components/PageHeader.astro";
import { getCollection, type CollectionEntry } from "astro:content";

// ===== È°µÈù¢ÂÖÉ‰ø°ÊÅØ =====
const title = "NOW";
const description =
  "What I‚Äôm into lately ‚Äî books, films, music ‚Äî plus a tiny feed of recent moments.";

// ===== ‰ªé Content Collections ËØªÂèñÊï∞ÊçÆÔºàÊåâËØ≠Ë®Ä‰∏éËçâÁ®øËøáÊª§Ôºâ =====
const locale: "en" | "zh" = "en";

const [booksEntries, moviesEntries, musicEntries, feedEntries] =
  await Promise.all([
    getCollection(
      "now_books",
      (e) => e.data.locale === locale && !e.data.draft,
    ),
    getCollection(
      "now_movies",
      (e) => e.data.locale === locale && !e.data.draft,
    ),
    getCollection(
      "now_music",
      (e) => e.data.locale === locale && !e.data.draft,
    ),
    getCollection("now_feed", (e) => e.data.locale === locale && !e.data.draft),
  ]);

type BookRec = CollectionEntry<"now_books">["data"];
type MovieRec = CollectionEntry<"now_movies">["data"];
type MusicRec = CollectionEntry<"now_music">["data"];
type Mini = CollectionEntry<"now_feed">["data"];

// Áªü‰∏Ä cover Â≠óÊÆµÔºàÊîØÊåÅ ImageMetadata Êàñ stringÔºâ
function normalizeCover(cover: BookRec["cover"]) {
  if (typeof cover === "string") {
    return { url: cover, w: 0, h: 0, isMeta: false };
  }
  // ImageMetadata
  return { url: cover.src, w: cover.width, h: cover.height, isMeta: true };
}

const books = booksEntries.map((e) => {
  const c = normalizeCover(e.data.cover);
  return { ...e.data, coverUrl: c.url, coverW: c.w, coverH: c.h };
});
const movies = moviesEntries.map((e) => {
  const c = normalizeCover(e.data.cover);
  return { ...e.data, coverUrl: c.url, coverW: c.w, coverH: c.h };
});
const music = musicEntries.map((e) => {
  const c = normalizeCover(e.data.cover);
  return { ...e.data, coverUrl: c.url, coverW: c.w, coverH: c.h };
});

// feedÔºàÊéíÂ∫è + Êó•ÊúüÂ≠óÁ¨¶‰∏≤Ôºâ
const feed = [...feedEntries.map((e) => e.data)]
  .filter(
    (x, i, arr) =>
      arr.findIndex(
        (y) => y.text === x.text && y.date.getTime() === x.date.getTime(),
      ) === i,
  )
  .sort((a, b) => b.date.getTime() - a.date.getTime())
  .map((f) => ({ ...f, dateStr: f.date.toISOString().slice(0, 10) }));

const updated =
  feed[0]?.dateStr ??
  new Date()
    .toLocaleDateString("ja-JP", { timeZone: "Asia/Tokyo" })
    .replaceAll("/", "-");
---

<BaseLayout title={title} description={description} includeFooter padBottom>
  <PageHeader title={title} description={description} />
  <Center>
    <article class="now">
      <p class="updated">Updated: {updated}</p>

      <!-- Êé®ËçêÂå∫Âùó -->
      <section class="section">
        <h2 class="section-title">Books</h2>
        <ul class="grid-cards">
          {
            books.map((b) => (
              <li class="card v">
                <div class="media ratio-3x4">
                  <img
                    src={b.coverUrl}
                    alt={`${b.title} cover`}
                    width={b.coverW || 600}
                    height={b.coverH || 800}
                    loading="lazy"
                    onerror="this.style.display='none';this.parentElement.classList.add('broken')"
                  />
                </div>
                <div class="info">
                  <div class="title">{b.title}</div>
                  {b.meta && <div class="meta">{b.meta}</div>}
                  {b.note && <p class="note">{b.note}</p>}
                  {b.href && (
                    <a
                      class="more"
                      href={b.href}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      Learn more ‚Üó
                    </a>
                  )}
                </div>
              </li>
            ))
          }
        </ul>
      </section>

      <section class="section">
        <h2 class="section-title">Movies</h2>
        <ul class="grid-cards">
          {
            movies.map((m) => (
              <li class="card v">
                <div class="media ratio-2x3">
                  <img
                    src={m.coverUrl}
                    alt={`${m.title} cover`}
                    width={m.coverW || 600}
                    height={m.coverH || 900}
                    loading="lazy"
                    onerror="this.style.display='none';this.parentElement.classList.add('broken')"
                  />
                </div>
                <div class="info">
                  <div class="title">{m.title}</div>
                  {m.meta && <div class="meta">{m.meta}</div>}
                  {m.note && <p class="note">{m.note}</p>}
                </div>
              </li>
            ))
          }
        </ul>
      </section>

      <section class="section">
        <h2 class="section-title">Music</h2>
        <ul class="grid-cards">
          {
            music.map((s) => (
              <li class="card v">
                <div class="media ratio-1x1">
                  <img
                    src={s.coverUrl}
                    alt={`${s.title} cover`}
                    width={s.coverW || 800}
                    height={s.coverH || 800}
                    loading="lazy"
                    onerror="this.style.display='none';this.parentElement.classList.add('broken')"
                  />
                </div>
                <div class="info">
                  <div class="title">{s.title}</div>
                  {s.meta && <div class="meta">{s.meta}</div>}
                  {s.note && <p class="note">{s.note}</p>}
                </div>
              </li>
            ))
          }
        </ul>
      </section>

      <!-- ÊúÄËøëÂä®ÊÄÅÔºà‰∏âÊù°Ôºâ -->
      <section class="section">
        <h2 class="section-title">Recent</h2>
        <ol class="mini-feed">
          {
            feed.slice(0, 3).map((f) => (
              <li class="mini-item">
                <span class="dot" aria-hidden="true">
                  {f.icon}
                </span>
                <div class="mini-body">
                  <div class="mini-head">
                    <time class="mini-date" datetime={f.dateStr}>
                      {f.dateStr}
                    </time>
                  </div>
                  <div class="mini-text">
                    {f.href ? (
                      <a
                        href={f.href}
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        {f.text}
                      </a>
                    ) : (
                      f.text
                    )}
                  </div>
                </div>
              </li>
            ))
          }
        </ol>
      </section>
    </article>
  </Center>
</BaseLayout>

<style lang="scss">
  .now {
    display: grid;
    gap: var(--space-3xl);
    padding-block-end: var(--space-3xl);
  }

  .updated {
    color: var(--gray-11);
    font-size: var(--step--1);
    margin: 0;
  }

  .section {
    display: grid;
    gap: var(--space-m);
  }
  .section-title {
    font-size: var(--step-1);
    font-weight: 700;
    letter-spacing: 0.02em;
  }

  /* Êé®ËçêÂç°ÁâáÁΩëÊ†º */
  .grid-cards {
    list-style: none;
    margin: 0;
    padding: 0;
    display: grid;
    gap: var(--space-l);
    grid-template-columns: repeat(3, minmax(0, 1fr));

    @media (width < 960px) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
    @media (width < 640px) {
      grid-template-columns: 1fr;
    }
  }

  /* ÁΩëÊ†ºÔºöÊõ¥ÈÄöÈÄèÁöÑ‰π¶Â∫óÈ£éÁïôÁôΩ */
  .grid-cards {
    list-style: none;
    margin: 0;
    padding: 0;
    display: grid;
    gap: var(--space-xl);
    grid-template-columns: repeat(3, minmax(0, 1fr));
    @media (width < 960px) {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
    @media (width < 640px) {
      grid-template-columns: 1fr;
    }
  }

  /* Á´ñÁâàÂç°ÁâáÔºöÂõæÂú®‰∏ä„ÄÅÊñáÂú®‰∏ãÔºå‰∏ç‰ºöÊúâÊñáÂ≠óÊå§ÂÖ•ÂõæÁâáÊ°Ü */
  .card.v {
    display: grid;
    gap: var(--space-m);
    border: 1px solid var(--gray-6);
    border-radius: 16px;
    background: #fff;
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.06);
    padding: var(--space-m);
  }

  /* Âõ∫ÂÆöÊØî‰æãÁõíÔºåÈò≤Â∏ÉÂ±ÄË∑≥Âä® */
  .media {
    position: relative;
    border-radius: 12px;
    overflow: hidden;
    border: 1px solid var(--gray-5);
    background: #fafafa;
  }
  .ratio-3x4 {
    aspect-ratio: 3 / 4;
  }
  .ratio-2x3 {
    aspect-ratio: 2 / 3;
  }
  .ratio-1x1 {
    aspect-ratio: 1 / 1;
  }

  .media img {
    width: 100%;
    height: 100%;
    display: block;
    object-fit: cover; /* Â°´Êª°ÂÆπÂô®Ôºå‰∏ç‰ºöÊääÊñáÂ≠óÊå§Âá∫Êù• */
  }

  /* ÂõæÁâáÂä†ËΩΩÂ§±Ë¥•Âç†‰ΩçÔºöÈöêËóèÂùèÂõæÔºå‰∏çÊòæÁ§∫ alt ÊñáÊú¨ */
  .media.broken::after {
    content: "üìï";
    position: absolute;
    inset: 0;
    display: grid;
    place-items: center;
    font-size: 40px;
    color: var(--gray-10);
  }

  /* ÊñáÊú¨ÔºöÈôêÂà∂Ë°åÊï∞ÔºåÈò≤Ê≠¢ÊíëÁ†¥Âç°Áâá */
  .info {
    display: grid;
    gap: 6px;
  }
  .title {
    font-weight: 800;
    line-height: 1.2;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .meta {
    font-size: var(--step--1);
    color: var(--gray-11);
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .note {
    margin: 0;
    color: var(--gray-12);
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .more {
    font-size: var(--step--1);
    text-decoration: underline;
  }

  /* ÊÇ¨ÊµÆ‰∏éÊó†ÈöúÁ¢ç */
  .card.v:hover {
    transform: translateY(-2px);
    box-shadow: 0 16px 36px rgba(0, 0, 0, 0.08);
  }
  @media (prefers-reduced-motion: reduce) {
    .card.v:hover {
      transform: none;
    }
  }

  /* ‰Ω†ÂéüÊù•ÁöÑ .mini-* Âå∫Âùó‰øùÊåÅ‰∏çÂèò */

  .info {
    display: grid;
    gap: 6px;
  }
  .title {
    font-weight: 600;
  }
  .meta {
    font-size: var(--step--1);
    color: var(--gray-11);
  }
  .note {
    margin: 0;
    color: var(--gray-12);
  }
  .more {
    font-size: var(--step--1);
    text-decoration: underline;
  }

  /* ÊúÄËøëÂä®ÊÄÅ */
  .mini-feed {
    list-style: none;
    margin: 0;
    padding: 0;
    display: grid;
    gap: var(--space-m);
  }

  .mini-item {
    display: grid;
    grid-template-columns: 28px 1fr;
    gap: var(--space-s);
    align-items: start;
  }

  .dot {
    width: 24px;
    height: 24px;
    display: grid;
    place-items: center;
    border-radius: 999px;
    background: #f6f6f6;
    border: 1px solid var(--gray-6);
    font-size: 14px;
  }

  .mini-body {
    display: grid;
    gap: 2px;
  }
  .mini-head {
    display: flex;
    gap: 8px;
    align-items: baseline;
  }
  .mini-date {
    font-size: var(--step--1);
    color: var(--gray-11);
  }
  .mini-text a {
    text-decoration: underline;
  }
</style>
